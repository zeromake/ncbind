{
  "name" : "Continuous Integration (Kirikiri SDL2)",
  "on" : {
    "push" : {
      "paths" : [
        "**.c",
        "**.h",
        "**.cpp",
        "**.hpp",
        "**.build",
        "**.in",
        "**.py",
        "**.yml",
        "**.gradle",
        "CMakeLists.txt"
      ]
    },
    "pull_request" : {
      "paths" : [
        "**.c",
        "**.h",
        "**.cpp",
        "**.hpp",
        "**.build",
        "**.in",
        "**.py",
        "**.yml",
        "**.gradle",
        "CMakeLists.txt"
      ]
    }
  },
  "env" : {
    "CMAKE_GENERATOR" : "Ninja",
    "HOMEBREW_NO_ANALYTICS" : "1",
    "HOMEBREW_NO_AUTO_UPDATE" : "1",
    "HOMEBREW_NO_INSTALL_UPGRADE" : "1",
    "HOMEBREW_NO_INSTALL_CLEANUP" : "1",
  },
  "jobs" : {
    "build-web" : {
      "runs-on" : "ubuntu-20.04",
      "timeout-minutes" : 20,
      "env" : {
        "EM_VERSION" : "3.1.24",
        "EM_CACHE_FOLDER" : "emsdk-cache"
      },
      "steps" : [
        {
          "name" : "Checkout repository",
          "uses" : "actions/checkout@v3",
          "with" : {
            "submodules" : "recursive"
          }
        },
        {
          "name" : "Install dependencies",
          "run" : "sudo apt-get update && sudo apt-get install build-essential libsdl2-dev git"
        },
        {
          "name" : "Setup cache",
          "id" : "cache-system-libraries",
          "uses" : "actions/cache@v2",
          "with" : {
            "path" : "${{env.EM_CACHE_FOLDER}}",
            "key" : "${{env.EM_VERSION}}-${{ runner.os }}"
          }
        },
        {
          "uses" : "mymindstorm/setup-emsdk@v11",
          "with" : {
            "version" : "${{env.EM_VERSION}}",
            "actions-cache-folder" : "${{env.EM_CACHE_FOLDER}}"
          }
        },
        {
          "name" : "Set up Homebrew environment for Github Actions",
          "run" : "echo \"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin\" >> $GITHUB_PATH"
        },
        {
          "name" : "Set up default build tools",
          "run" : "brew install make nasm ninja cmake"
        },
        {
          "name" : "Configure project",
          "run" : "emcmake cmake -S . -B build"
        },
        {
          "name" : "Build project",
          "run" : "cmake --build build"
        },
        {
          "name" : "Archive artifact",
          "run" : "cd build && 7z a -tzip ${{ github.event.repository.name }}-web.zip *.so"
        },
        {
          "name" : "Upload artifact",
          "uses" : "actions/upload-artifact@master",
          "with" : {
            "name" : "${{ github.event.repository.name }}-web",
            "path" : "build/*.zip"
          }
        }
      ]
    },
    "build-ubuntu" : {
      "runs-on" : "ubuntu-20.04",
      "timeout-minutes" : 20,
      "steps" : [
        {
          "name" : "Checkout repository",
          "uses" : "actions/checkout@v3",
          "with" : {
            "submodules" : "recursive"
          }
        },
        {
          "name" : "Install dependencies",
          "run" : "sudo apt-get update && sudo apt-get install build-essential libsdl2-dev"
        },
        {
          "name" : "Set up Homebrew environment for Github Actions",
          "run" : "echo \"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin\" >> $GITHUB_PATH"
        },
        {
          "name" : "Set up default build tools",
          "run" : "brew install make nasm ninja cmake"
        },
        {
          "name" : "Configure project",
          "run" : "cmake -S . -B build"
        },
        {
          "name" : "Build project",
          "run" : "cmake --build build"
        },
        {
          "name" : "Archive artifact",
          "run" : "cd build && 7z a -tzip ${{ github.event.repository.name }}-ubuntu.zip *.so"
        },
        {
          "name" : "Upload artifact",
          "uses" : "actions/upload-artifact@master",
          "with" : {
            "name" : "${{ github.event.repository.name }}-ubuntu",
            "path" : "build/*.zip"
          }
        }
      ]
    },
    "build-android" : {
      "runs-on" : "ubuntu-20.04",
      "timeout-minutes" : 20,
      "strategy" : {
        "fail-fast" : false,
        "matrix" : {
          "platform" : [
            {
              "android_abi" : "armeabi-v7a",
              "extra_cmake_flags" : "-DANDROID_ARM_NEON=ON"
            },
            {
              "android_abi" : "arm64-v8a",
              "extra_cmake_flags" : ""
            },
            {
              "android_abi" : "x86",
              "extra_cmake_flags" : ""
            },
            {
              "android_abi" : "x86_64",
              "extra_cmake_flags" : ""
            }
          ]
        }
      },
      "steps" : [
        {
          "name" : "Checkout repository",
          "uses" : "actions/checkout@v3",
          "with" : {
            "submodules" : "recursive"
          }
        },
        {
          "name" : "Install dependencies",
          "run" : "sudo apt-get update && sudo apt-get install build-essential libsdl2-dev"
        },
        {
          "name" : "Set up Homebrew environment for Github Actions",
          "run" : "echo \"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin\" >> $GITHUB_PATH"
        },
        {
          "name" : "Set up default build tools",
          "run" : "brew install make nasm ninja cmake"
        },
        {
          "name" : "Set up Android NDK",
          "uses" : "nttld/setup-ndk@v1",
          "id" : "setup_ndk",
          "with" : {
            "ndk-version" : "r21e"
          }
        },
        {
          "name" : "Set up Java",
          "uses" : "actions/setup-java@v3",
          "with" : {
            "distribution" : "temurin",
            "java-version" : "11"
          }
        },
        {
          "name" : "Configure project",
          "run" : "cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup_ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_PLATFORM=android-19 -DANDROID_ABI=${{ matrix.platform.android_abi }} ${{ matrix.platform.extra_cmake_flags }}"
        },
        {
          "name" : "Build project",
          "run" : "cmake --build build"
        },
        {
          "name" : "Archive artifact",
          "run" : "cd build && 7z a -tzip ${{ github.event.repository.name }}-android-${{ matrix.platform.android_abi }}.zip *.so"
        },
        {
          "name" : "Upload artifact",
          "uses" : "actions/upload-artifact@master",
          "with" : {
            "name" : "${{ github.event.repository.name }}-android-${{ matrix.platform.android_abi }}",
            "path" : "build/*.zip"
          }
        }
      ]
    },
    "build-macos-cmake" : {
      "runs-on" : "macos-11",
      "timeout-minutes" : 20,
      "steps" : [
        {
          "name" : "Checkout repository",
          "uses" : "actions/checkout@v3",
          "with" : {
            "submodules" : "recursive"
          }
        },
        {
          "name" : "Set up default build tools",
          "run" : "brew install make nasm ninja cmake p7zip"
        },
        {
          "name" : "Configure project",
          "run" : "cmake -S . -B build"
        },
        {
          "name" : "Build project",
          "run" : "cmake --build build"
        },
        {
          "name" : "Archive artifact",
          "run" : "cd build && 7z a -tzip ${{ github.event.repository.name }}-macos.zip *.so"
        },
        {
          "name" : "Upload artifact",
          "uses" : "actions/upload-artifact@master",
          "with" : {
            "name" : "${{ github.event.repository.name }}-macos",
            "path" : "build/*.zip"
          }
        }
      ]
    },
    "create-release" : {
      "needs" : [
        "build-android",
        "build-web",
        "build-macos-cmake",
        "build-ubuntu"
      ],
      "runs-on" : "ubuntu-20.04",
      "timeout-minutes" : 20,
      "if" : "github.ref == 'refs/heads/krkrsdl2'",
      "steps" : [
        {
          "name" : "Download all artifacts",
          "uses" : "actions/download-artifact@v3"
        },
        {
          "name" : "Prepare artifacts for release",
          "run" : "cp -t . ${{ github.event.repository.name }}-*/*.zip"
        },
        {
          "name" : "Create prerelease",
          "if" : "github.ref == 'refs/heads/krkrsdl2'",
          "uses" : "marvinpinto/action-automatic-releases@latest",
          "with" : {
            "repo_token" : "${{ secrets.GITHUB_TOKEN }}",
            "prerelease" : "true",
            "automatic_release_tag" : "latest_krkrsdl2",
            "title" : "Latest development builds",
            "files" : "*.zip"
          }
        }
      ]
    }
  }
}
